from collections import defaultdict
from typing import List
class Solution:
    def minimumTeachings(self, n: int, languages: List[List[int]], friendships: List[List[int]]) -> int:
        
        languages.insert(0,[]) #adjust indices
        languages_ = [set(x) for x in languages]
        
        need_learning = set()
        for a,b in friendships:
            if not languages_[a].intersection(languages_[b]):
                need_learning.add(a)
                need_learning.add(b)

        min_teach = len(need_learning)
        for lang in range(1,n+1):
            cur_min = 0
            for a in need_learning:
                if lang not in languages_[a]:
                    cur_min +=1
            min_teach = min(min_teach, cur_min)

        return min_teach
    


engine = Solution()

n = 2; languages = [[1],[2],[1,2]]; friendships = [[1,2],[1,3],[2,3]]
print(engine.minimumTeachings(n,languages,friendships), 1)

n = 3; languages = [[2],[1,3],[1,2],[3]]; friendships = [[1,4],[1,2],[3,4],[2,3]]
print(engine.minimumTeachings(n,languages,friendships), 2)


n=17
languages=[[4,7,2,14,6],[15,13,6,3,2,7,10,8,12,4,9],[16],[10],[10,3],[4,12,8,1,16,5,15,17,13],[4,13,15,8,17,3,6,14,5,10],[11,4,13,8,3,14,5,7,15,6,9,17,2,16,12],[4,14,6],[16,17,9,3,11,14,10,12,1,8,13,4,5,6],[14],[7,14],[17,15,10,3,2,12,16,14,1,7,9,6,4]];
friendships=[[4,11],[3,5],[7,10],[10,12],[5,7],[4,5],[3,8],[1,5],[1,6],[7,8],[4,12],[2,4],[8,9],[3,10],[4,7],[5,12],[4,9],[1,4],[2,8],[1,2],[3,4],[5,10],[2,7],[1,7],[1,8],[8,10],[1,9],[1,10],[6,7],[3,7],[8,12],[7,9],[9,11],[2,5],[2,3]]
print(engine.minimumTeachings(n,languages,friendships), 4)


n = 10
languages = [[9,8,3,6],[3,9,1,5,2,4],[9,6],[1,7],[9,3,1,4,8,5],[10,1,4,7],[10,7,8,6,2],[2,7,8,6,3,5,4,10,9],[3,7,1,2,9,6,8,10],[10,1,7,8,9,4,5,2],[8,4,3],[10,8,3,4,2,9,5,1,7],[10,3,4,9,7,6],[1,6],[1],[9,2,6,5,7],[6,5,8,1,3],[7,9,2,6,10,3,5,1,4]]
friendships = [[13,15],[7,17],[2,13],[8,17],[2,10],[8,15],[5,14],[1,6],[4,15],[3,8],[12,17],[12,16],[3,15],[6,15],[15,17],[13,17],[1,16],[3,7],[2,5],[8,13],[3,5],[2,8],[11,14],[1,4],[7,8],[1,3],[5,6],[9,14],[7,12],[9,13],[10,12],[8,12],[10,11],[2,7],[3,14],[4,7],[6,17],[4,6],[6,12],[4,10],[1,8],[2,12],[2,17],[2,9],[9,11],[6,16],[1,5],[7,15],[1,12],[4,13],[4,5],[4,8],[1,17],[1,7],[2,14],[8,9],[5,8],[9,15],[7,14],[3,17],[9,16],[13,14],[5,17],[5,13],[8,10],[1,15],[6,11],[13,16],[3,16],[1,11],[5,10],[1,13],[12,15],[1,9],[2,16],[8,14],[2,11],[2,3],[3,11],[6,14],[3,9],[5,11],[6,7],[9,12],[14,15],[12,13],[10,13],[10,16],[3,10],[6,10],[6,9],[7,13],[9,17],[2,4]]
print(engine.minimumTeachings(n,languages,friendships), 4)


n=22
languages  = [[9,12,4,13,3,19,16,1,20,17,2,6,22,11,15,10,5,18,7,8,21],[20,2,3,5,17,19,21,1,16,11,18,9,4,6,8,13,12,14,7,10,15,22],[15,3,6,10,9,22,1,14,21,8,11,19],[20,18],[11,20,19,7,5,12,16,17,2,6,4,9,10,3],[11,16,20,7,6,15,4,8,18,12,22,13,1,3,9,14,10,5,21,2,19],[11,13,12,14,20,4,22,3,18,17,6,1,5,10,8,15,19,21,2,9],[12,5,15,2,6,3,20],[6,14,19,21,8,20,3,16,13,1,11,17,4],[1,16,8,7,18,10],[4,11,13],[16,20,21,18,15,13,3,8],[19,14,17,9,5,12,3,7,8],[19,9],[7,9,5,16,6,15,11,2,4,10,19,18,20,3,21,22,13,12,1,14,8],[11,21,22,12,5,19,13,20,9,17,8,4,18,1,6,14,7,2,10,16,3,15],[2,21,11,16,12,5,6,13,17,7,18,3,9,4,8,14,15,10,20],[18,22],[16,22,19,2,13,8,9,14,21,18,20,15,1,4],[9,16,4,18,17,20,22,2,5,13,10,6,11,7,1,8,12,14,15]]
friendships = [[6,11],[3,7],[7,11],[10,16],[3,6],[6,16],[4,19],[3,4],[18,19],[8,9],[11,19],[3,13],[1,8],[6,8],[5,16],[2,3],[5,7],[3,8],[13,17],[3,11],[9,10],[12,18],[13,18],[10,17],[1,10],[5,13],[6,17],[2,9],[4,18],[12,15],[11,16],[12,17],[11,15],[8,13],[2,15],[4,15],[7,10],[4,13],[5,14],[1,19],[4,17],[2,12],[14,18],[14,19],[6,9],[3,10],[4,12],[5,12],[10,18],[14,17],[8,18],[1,2],[11,12],[9,17],[8,12],[6,19],[4,9],[6,12],[10,11],[2,10],[12,13],[2,11],[4,6],[13,14],[8,16],[4,10],[5,9],[9,13],[4,5],[11,14],[1,16],[3,5],[2,18],[13,19],[16,19],[1,5],[6,14],[2,16],[1,17],[4,7],[3,12],[17,19],[1,11],[1,4],[2,8],[8,11],[10,12],[2,4],[2,6],[3,14],[8,14],[11,13],[3,16],[7,15],[8,10],[16,18],[1,6],[5,11],[7,8],[2,17],[14,16],[5,17],[12,19],[4,8],[5,19],[6,18],[5,15],[3,9],[12,16],[6,13],[7,14],[3,18],[9,12],[2,7],[10,13],[9,16],[9,15],[7,9],[15,16],[11,17],[7,17],[5,18],[15,18],[6,7],[12,14],[13,15],[10,15],[9,18],[1,14],[8,15],[4,16],[9,11],[1,18],[4,11],[7,12],[8,19],[7,16],[10,19],[7,13],[1,13],[5,6],[3,15],[5,8],[1,15],[16,17],[17,18],[11,18],[1,12],[9,14],[15,19],[13,16],[8,17],[6,10],[5,10],[1,9],[7,19],[3,19],[2,5],[10,14],[6,15],[3,17],[2,14]]
print(engine.minimumTeachings(n,languages,friendships), 5)